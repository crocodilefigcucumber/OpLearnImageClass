Metadata-Version: 2.1
Name: fourierimaging
Version: 0.0.1
Summary: Python package for Forier Imaging Networks
Home-page: https://github.com/samirak98/FourierImaging
Author: Samira Kabri and Tim Roith
Author-email: tim.roith@fau.de
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: torch
Requires-Dist: torchvision
Requires-Dist: matplotlib
Requires-Dist: hydra-core
Requires-Dist: omegaconf
Requires-Dist: tqdm
Requires-Dist: pyyaml

# Experiments on FMNIST/Other Datasets

Original Setup has been taken from [here](https://github.com/samirak98/FourierImaging), [arxiv](https://arxiv.org/abs/2304.01227).



## SpectralConv2d
Install: In the directory simply run

```bash
pip install -e .
```

- ```in_channels, out_channels```: clear
- ```paramterization```: 'spatial', 'spectral' how to parameterize the kernel. Convertable, but differences in training opt
- ```in_shape```: only applies for ```param='spatial'```. Options:
    - ```in_shape=None```: spatial kernel doman varies with input resolution in the same way as normal CNNS
    - ```in_shape=[N,M]```: kernel to image relation is apadpted to kernel shape to ```in_shape``` relation. 
- ```out_shape```: applies for both parametrizations Determines output shape after convolution but **before** striding.
    - ```out_shape=None```: this yields ```out_shape``` equal to the shape of the input
    - ```out_shape=[N,M]```: resizng via trigonometric interpolation. Here, ```N,M``` can not depend on the input shape.
- ```stride```: usual striding, like for CNNs.
- ```odd```: only applies for ```param='spectral'```. Determines if the parametrized kernel fft $\mathcal{F}(k)$ has odd or even width.
- ```norm```: determines the norm to be used in FFT. If ```out_shape``` is **not** ```None``` the norm is recommended to be choosen as ```norm='forward'```. 

> A normal CNN can be mimicked by using ```in_shape=None, out_shape = None```
>

